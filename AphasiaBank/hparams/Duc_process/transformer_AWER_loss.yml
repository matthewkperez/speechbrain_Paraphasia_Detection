# ################################
# Model: E2E ASR with Transformer
# Encoder: Transformer Encoder
# Decoder: Transformer Decoder + (CTC/ATT joint) beamsearch + TransformerLM
# Augmentation: SpecAugment
# Taken from Librispeech recipe
# ################################

# Seed needs to be set at top of yaml, before objects with parameters are made
seed: 2000
__set_seed: !apply:torch.manual_seed [!ref <seed>]
output_folder: !ref results/no_paraphasia/S2S/Transformer/AWER-char-SP-newBob
wer_file: !ref <output_folder>/wer.txt
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt
# data_dir: /z/mkperez/speechbrain/AphasiaBank/data/no_paraphasia
data_dir: /z/mkperez/speechbrain/AphasiaBank/data/no_paraphasia/mtl_paraphasia
data_folder: !ref <data_dir>

# Ngram LM
use_language_modelling: True
ngram_lm_path: /z/mkperez/AphasiaBank/kd_updated_para/Aphasia+Control/lang-3-gram_lower/G.arpa


# Data files
train_splits: ["train"]
dev_splits: ["dev"]
test_splits: ["test"]
skip_prep: False
ckpt_interval_minutes: 30 # save checkpoint every N min
train_csv: !ref <data_dir>/train_pn.csv
valid_csv: !ref <data_dir>/dev_pn.csv
test_csv: !ref <data_dir>/test_pn.csv

# Training parameters
auto_mix_prec: False
max_length: 10 # change to 20
min_length: 0.7
max_sev_train: 4
min_sev_train: -1
val_attn_ids: ['wright99a-97','MSUC01a-109', 'capilouto33a-494', 'richardson200-69','wright08a-140','ACWT09a-13','adler15a-546','BU10a-508','kurland23b-574','scale05a-91']

# Training parameters
# To make Transformers converge, the global bath size should be large enough.
# The global batch size is computed as batch_size * n_gpus * gradient_accumulation.
# Empirically, we found that this value should be >= 128.
# Please, set your parameters accordingly.
number_of_epochs: 50
batch_size: 10 # This works for 1x GPU with 40GB with no dynamic batching
ctc_weight: 0.3
grad_accumulation_factor: 4
max_grad_norm: 5.0
loss_reduction: 'batchmean'
sorting: descending
num_workers: 4

# Dataloader options
train_dataloader_opts:
    batch_size: !ref <batch_size>
    shuffle: True
    num_workers: !ref <num_workers>
valid_dataloader_opts:
    batch_size: 1
test_dataloader_opts:
    batch_size: 1

# This setup works well for V100 32GB GPU, adapts it to your needs.
# Or turn it off (but training speed will decrease)
dynamic_batching: False
max_batch_len: 300 # total seconds of audio (mult by batch size)
max_batch_len_val: 100 # we reduce it as the beam is much wider (VRAM)
num_bucket: 200

dynamic_batch_sampler:
    max_batch_len: !ref <max_batch_len>
    max_batch_len_val: !ref <max_batch_len_val>
    num_buckets: !ref <num_bucket>
    shuffle_ex: True # if true re-creates batches at each epoch shuffling examples.
    batch_ordering: random
    max_batch_ex: 64


# tokenizer
token_type: "char"
tokenizer: !new:sentencepiece.SentencePieceProcessor
user_defined_symbols: "/,C,P"
blank_index: 0
label_smoothing: 0.0
pad_index: 0
bos_index: 1
eos_index: 2
unk_index: 3

# stages related parameters
lr_adam: 1.0e-4

# Feature parameters
sample_rate: 16000
n_fft: 400
n_mels: 80

# Model parameters ###########################
# Transformer
d_model: 512
nhead: 8
num_encoder_layers: 12
num_decoder_layers: 6
d_ffn: 2048
transformer_dropout: 0.1
activation: !name:torch.nn.GELU
output_neurons: 34

# Decoding parameters
min_decode_ratio: 0.0
max_decode_ratio: 1.0
valid_search_interval: 25
valid_beam_size: 5
test_beam_size: 50
lm_weight: 0.60
ctc_weight_decode: 0.40

############################## models ################################

CNN: !new:speechbrain.lobes.models.convolution.ConvolutionFrontEnd
    input_shape: (8, 10, 80)
    num_blocks: 3
    num_layers_per_block: 1
    out_channels: (64, 64, 64)
    kernel_sizes: (5, 5, 1)
    strides: (2, 2, 1)
    residuals: (False, False, True)

Transformer: !new:speechbrain.lobes.models.transformer.TransformerASR.TransformerASR # yamllint disable-line rule:line-length
    input_size: 1280
    tgt_vocab: !ref <output_neurons>
    d_model: !ref <d_model>
    nhead: !ref <nhead>
    num_encoder_layers: !ref <num_encoder_layers>
    num_decoder_layers: !ref <num_decoder_layers>
    d_ffn: !ref <d_ffn>
    dropout: !ref <transformer_dropout>
    activation: !ref <activation>
    encoder_module: transformer
    attention_type: regularMHA
    normalize_before: True
    causal: False

ctc_lin: !new:speechbrain.nnet.linear.Linear
    input_size: !ref <d_model>
    n_neurons: !ref <output_neurons>

seq_lin: !new:speechbrain.nnet.linear.Linear
    input_size: !ref <d_model>
    n_neurons: !ref <output_neurons>

normalize: !new:speechbrain.processing.features.InputNormalization
    norm_type: global
    update_until_epoch: 4

modules:
    CNN: !ref <CNN>
    Transformer: !ref <Transformer>
    seq_lin: !ref <seq_lin>
    ctc_lin: !ref <ctc_lin>
    normalize: !ref <normalize>

model: !new:torch.nn.ModuleList
    - [!ref <CNN>, !ref <Transformer>, !ref <seq_lin>, !ref <ctc_lin>]

# define two optimizers here for two-stage training
Adam: !name:torch.optim.Adam
    lr: !ref <lr_adam>
    betas: (0.9, 0.98)
    eps: 0.000000001


valid_search: !new:speechbrain.decoders.S2STransformerBeamSearch
    modules: [!ref <Transformer>, !ref <seq_lin>, !ref <ctc_lin>]
    bos_index: !ref <bos_index>
    eos_index: !ref <eos_index>
    blank_index: !ref <blank_index>
    min_decode_ratio: !ref <min_decode_ratio>
    max_decode_ratio: !ref <max_decode_ratio>
    beam_size: !ref <valid_beam_size>
    ctc_weight: !ref <ctc_weight_decode>
    using_eos_threshold: False
    length_normalization: False


test_search: !new:speechbrain.decoders.S2STransformerBeamSearch
    modules: [!ref <Transformer>, !ref <seq_lin>, !ref <ctc_lin>]
    bos_index: !ref <bos_index>
    eos_index: !ref <eos_index>
    blank_index: !ref <blank_index>
    min_decode_ratio: !ref <min_decode_ratio>
    max_decode_ratio: !ref <max_decode_ratio>
    beam_size: !ref <test_beam_size>
    ctc_weight: !ref <ctc_weight_decode>
    temperature: 1.15
    temperature_lm: 1.15
    using_eos_threshold: True
    length_normalization: True

log_softmax: !new:torch.nn.LogSoftmax
    dim: -1

ctc_cost: !name:speechbrain.nnet.losses.ctc_loss
    blank_index: !ref <blank_index>
    reduction: !ref <loss_reduction>

# seq_cost: !name:speechbrain.nnet.losses.kldiv_loss
#     label_smoothing: !ref <label_smoothing>
#     reduction: !ref <loss_reduction>

seq_cost: !name:speechbrain.nnet.losses.nll_loss
   label_smoothing: 0.1


noam_annealing: !new:speechbrain.nnet.schedulers.NoamScheduler
    lr_initial: !ref <lr_adam>
    n_warmup_steps: 25000

lr_annealing: !new:speechbrain.nnet.schedulers.NewBobScheduler
   initial_value: !ref <lr_adam>
   improvement_threshold: 0.0025
   annealing_factor: 0.8
   patient: 1

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        model: !ref <model>
        noam_scheduler: !ref <noam_annealing>
        normalizer: !ref <normalize>
        counter: !ref <epoch_counter>

epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
   limit: !ref <number_of_epochs>

# epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounterWithStopper
#    limit: !ref <number_of_epochs>
#    limit_to_stop: 7
#    limit_warmup: 5
#    direction: "min"


augmentation: !new:speechbrain.lobes.augment.SpecAugment
    time_warp: False
    time_warp_window: 5
    time_warp_mode: bicubic
    freq_mask: True
    n_freq_mask: 4
    time_mask: True
    n_time_mask: 4
    replace_with_zero: False
    freq_mask_width: 15
    time_mask_width: 20

speed_perturb: True

compute_features: !new:speechbrain.lobes.features.Fbank
    sample_rate: !ref <sample_rate>
    n_fft: !ref <n_fft>
    n_mels: !ref <n_mels>

train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>

error_rate_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats
cer_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats
   split_tokens: True
acc_computer: !name:speechbrain.utils.Accuracy.AccuracyStats

# # The pretrainer allows a mapping between pretrained files and instances that
# # are declared in the yaml. E.g here, we will download the file lm.ckpt
# # and it will be loaded into "lm" which is pointing to the <lm_model> defined
# # before.
# pretrained_lm_tokenizer_path: speechbrain/asr-transformer-transformerlm-librispeech
# pretrainer: !new:speechbrain.utils.parameter_transfer.Pretrainer
#     collect_in: !ref <save_folder>
#     loadables:
#         lm: !ref <lm_model>
#         tokenizer: !ref <tokenizer>
#     paths:
#         lm: !ref <pretrained_lm_tokenizer_path>/lm.ckpt
#         tokenizer: !ref <pretrained_lm_tokenizer_path>/tokenizer.ckpt
